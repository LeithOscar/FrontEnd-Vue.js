
get started

use vite + Vue + pinia + Ts

vite: https://vitejs.dev/ npm isntall view
pinia: gestor de estados y compatible con Ts : https://pinia.vuejs.org/ npm install pinia
vue.js


pinia
Pinia es una librería de almacenamiento para Vue, 
que permite compartir un estado entre componentes/páginas.
 Si estás familiarizado con la API de composición, podrías 
 pensar que ya puedes compartir un estado global con un 
 simple export const state = reactive({}).

Traducción realizada con la versión gratuita del traductor www.DeepL.com/Translator
create project

 npm create vite
     set name
        vue + ts   
            and get to new folder
                install dependecies



Eliminar todas las vistas

____________________________________

crear carpeta view HomeView + CounterView
informar template de cada vistas

<template>
   <h1>
       Home View
   </h1>

</template>  
........

______________________________________

nos falta la navegacion

crar carpeta Router + index.Ts

    crear array RouteRecordRaw

    import { createRouter, createWebHistory, RouteRecordRaw } from 'vue-router'

    const routes: RouteRecordRaw[] = [
        {
            path: '/',
            name: 'Home',
            component: HomeView
        },
        {
            path: '/counter',
            name: 'Counter',
            component: CounterView
        }];


    const router = createRouter({
        history:createWebHistory(),
        //routes: routes //Ecma script 6 asthe same name
        routes
    });
export default router;

IR A main.ts

.use(router)


app.vue, añadir navegacion

<template>
  <router-link to="/">Home</router-link>
  {{' '}}
  <router-link to="/counter">Counter</router-link>
  <router-view></router-view>
</template>

____________________________________

INSTALAR Pinia

npm pinia install

en main.ts
import { createPinia } from 'pinia';



//crear store
.use( createPinia() )


cramos nuestra carpeta store + counter.ts


import { defineStore } from 'pinia';

export const useCounterStore = defineStore('counter',{

    state:()=>({
        counter: 0,
        numberOfChanges:0
    }),

    actions:{
        incrementBy(value: number){
            this.counter += value
            this.numberOfChanges +=1;
        }
    }
})



una vez creado

vamos a la views para usar nuestro store

HomeView
    <template>
    <h1>
        Home View: {{counterStore.counter}}
    </h1>
    <h3>
        Home nm of changes: {{counterStore.numberOfChanges}}
    </h3>

    </template>   

    <script lang="ts" setup>
    import { useCounterStore } from '../stores/counter'

    const counterStore = useCounterStore()

    </script>

CounterView

    <template>
        <h1>
            Counter View: {{counterStore.counter}}
        </h1>
        <button  @click="counterStore.incrementBy(1)">+1</button> 
        <button @click="counterStore.incrementBy(2)">+2</button> 
        <button @click="counterStore.incrementBy(5)">+5</button> 

    </template>   


    <script lang="ts" setup>
    import { useCounterStore } from '../stores/counter'

    const counterStore = useCounterStore()

    </script>

____________________________________

Basic sintaxis
El código dentro se compila como el contenido de la
 función setup() del componente. Esto significa que, 
 a diferencia del <script> normal, que sólo se ejecuta
  una vez cuando se importa el componente por primera vez,
   el código dentro de <script setup> se ejecutará 
cada vez que se cree una instancia del componente



UNIT TEST

vue.test utils
npm i --save-dev @types/jest
npm install @vue/test-utils --save-dev  https://github.com/vuejs/test-utils

jest 
npm install jest @types/jest ts-jest --save

more info about config:
https://github.com/vuejs/vue-jest


from : https://dev.to/vuesomedev/add-testing-to-vite-4b75